package com.secreal.cari_movie.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.secreal.cari_movie.Dao.Rating;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RATING.
*/
public class RatingDao extends AbstractDao<Rating, Long> {

    public static final String TABLENAME = "RATING";

    /**
     * Properties of entity Rating.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdMovie = new Property(1, long.class, "idMovie", false, "ID_MOVIE");
        public final static Property IdUser = new Property(2, String.class, "idUser", false, "ID_USER");
        public final static Property Rating = new Property(3, float.class, "rating", false, "RATING");
    };

    private DaoSession daoSession;


    public RatingDao(DaoConfig config) {
        super(config);
    }
    
    public RatingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RATING' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_MOVIE' INTEGER NOT NULL ," + // 1: idMovie
                "'ID_USER' TEXT NOT NULL ," + // 2: idUser
                "'RATING' REAL NOT NULL );"); // 3: rating
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RATING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rating entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdMovie());
        stmt.bindString(3, entity.getIdUser());
        stmt.bindDouble(4, entity.getRating());
    }

    @Override
    protected void attachEntity(Rating entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rating readEntity(Cursor cursor, int offset) {
        Rating entity = new Rating( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idMovie
            cursor.getString(offset + 2), // idUser
            cursor.getFloat(offset + 3) // rating
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rating entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdMovie(cursor.getLong(offset + 1));
        entity.setIdUser(cursor.getString(offset + 2));
        entity.setRating(cursor.getFloat(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rating entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rating entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
