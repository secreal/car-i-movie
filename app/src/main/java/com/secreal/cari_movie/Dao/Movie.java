package com.secreal.cari_movie.Dao;

import android.os.Parcel;
import android.os.Parcelable;

import com.secreal.cari_movie.Dao.DaoSession;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MOVIE.
 */
public class Movie implements Serializable, Parcelable {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String Detail;
    /** Not-null value. */
    private String image;
    /** Not-null value. */
    private String umur;
    /** Not-null value. */
    private String trailer1;
    private String trailer2;
    private int tahun;
    private int durasi;
    private String background;

    public String getBackground() {
        return background;
    }

    public void setBackground(String background) {
        this.background = background;
    }

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MovieDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Movie() {
    }

    public Movie(Long id) {
        this.id = id;
    }

    public Movie(Long id, String name, String Detail, String image, String umur, String trailer1, String trailer2, int tahun, int durasi) {
        this.id = id;
        this.name = name;
        this.Detail = Detail;
        this.image = image;
        this.umur = umur;
        this.trailer1 = trailer1;
        this.trailer2 = trailer2;
        this.tahun = tahun;
        this.durasi = durasi;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMovieDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getDetail() {
        return Detail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDetail(String Detail) {
        this.Detail = Detail;
    }

    /** Not-null value. */
    public String getImage() {
        return image;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setImage(String image) {
        this.image = image;
    }

    /** Not-null value. */
    public String getUmur() {
        return umur;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUmur(String umur) {
        this.umur = umur;
    }

    /** Not-null value. */
    public String getTrailer1() {
        return trailer1;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTrailer1(String trailer1) {
        this.trailer1 = trailer1;
    }

    public String getTrailer2() {
        return trailer2;
    }

    public void setTrailer2(String trailer2) {
        this.trailer2 = trailer2;
    }

    public int getTahun() {
        return tahun;
    }

    public void setTahun(int tahun) {
        this.tahun = tahun;
    }

    public int getDurasi() {
        return durasi;
    }

    public void setDurasi(int durasi) {
        this.durasi = durasi;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {

    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
