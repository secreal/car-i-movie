package com.secreal.cari_movie.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.secreal.cari_movie.Dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUser = new Property(1, String.class, "idUser", false, "ID_USER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Option1 = new Property(4, String.class, "option1", false, "OPTION1");
        public final static Property Option2 = new Property(5, String.class, "option2", false, "OPTION2");
        public final static Property Option3 = new Property(6, String.class, "option3", false, "OPTION3");
        public final static Property Option4 = new Property(7, String.class, "option4", false, "OPTION4");
        public final static Property Option5 = new Property(8, String.class, "option5", false, "OPTION5");
        public final static Property Option6 = new Property(9, String.class, "option6", false, "OPTION6");
        public final static Property Option7 = new Property(10, String.class, "option7", false, "OPTION7");
        public final static Property Option8 = new Property(11, String.class, "option8", false, "OPTION8");
        public final static Property Option9 = new Property(12, String.class, "option9", false, "OPTION9");
        public final static Property Option10 = new Property(13, String.class, "option10", false, "OPTION10");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_USER' TEXT NOT NULL ," + // 1: idUser
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'EMAIL' TEXT NOT NULL ," + // 3: email
                "'OPTION1' TEXT," + // 4: option1
                "'OPTION2' TEXT," + // 5: option2
                "'OPTION3' TEXT," + // 6: option3
                "'OPTION4' TEXT," + // 7: option4
                "'OPTION5' TEXT," + // 8: option5
                "'OPTION6' TEXT," + // 9: option6
                "'OPTION7' TEXT," + // 10: option7
                "'OPTION8' TEXT," + // 11: option8
                "'OPTION9' TEXT," + // 12: option9
                "'OPTION10' TEXT);"); // 13: option10
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdUser());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getEmail());
 
        String option1 = entity.getOption1();
        if (option1 != null) {
            stmt.bindString(5, option1);
        }
 
        String option2 = entity.getOption2();
        if (option2 != null) {
            stmt.bindString(6, option2);
        }
 
        String option3 = entity.getOption3();
        if (option3 != null) {
            stmt.bindString(7, option3);
        }
 
        String option4 = entity.getOption4();
        if (option4 != null) {
            stmt.bindString(8, option4);
        }
 
        String option5 = entity.getOption5();
        if (option5 != null) {
            stmt.bindString(9, option5);
        }
 
        String option6 = entity.getOption6();
        if (option6 != null) {
            stmt.bindString(10, option6);
        }
 
        String option7 = entity.getOption7();
        if (option7 != null) {
            stmt.bindString(11, option7);
        }
 
        String option8 = entity.getOption8();
        if (option8 != null) {
            stmt.bindString(12, option8);
        }
 
        String option9 = entity.getOption9();
        if (option9 != null) {
            stmt.bindString(13, option9);
        }
 
        String option10 = entity.getOption10();
        if (option10 != null) {
            stmt.bindString(14, option10);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // idUser
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // option1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // option2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // option3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // option4
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // option5
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // option6
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // option7
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // option8
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // option9
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // option10
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUser(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setEmail(cursor.getString(offset + 3));
        entity.setOption1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOption2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOption3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOption4(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOption5(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOption6(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOption7(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOption8(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOption9(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOption10(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
